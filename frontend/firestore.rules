rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /forumPosts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;

      match /answers/{answerId} {
        allow read: if true;

        // CREATE Answer Rule
        allow create: if request.auth != null &&
                         request.resource.data.authorId == request.auth.uid &&
                         request.resource.data.content is string &&
                         request.resource.data.content.size() > 0 &&
                         request.resource.data.postId == postId &&
                         request.resource.data.helpfulVoteCount == 0 &&
                         request.resource.data.notHelpfulVoteCount == 0 &&
                         request.resource.data.keys().hasAll(['authorId', 'content', 'timestamp', 'postId', 'authorDisplayName', 'helpfulVoteCount', 'notHelpfulVoteCount']) &&
                         request.resource.data.keys().hasOnly(['authorId', 'content', 'timestamp', 'postId', 'authorDisplayName', 'helpfulVoteCount', 'notHelpfulVoteCount']);

        // UPDATE Answer Rule
        allow update: if request.auth != null &&
                         (request.resource.data.authorId == null || request.resource.data.authorId == resource.data.authorId) &&
                         (request.resource.data.postId == null || request.resource.data.postId == resource.data.postId) &&
                         (request.resource.data.timestamp == null || request.resource.data.timestamp == resource.data.timestamp) &&
                         (
                           ( // Case 1: Author updates
                             resource.data.authorId == request.auth.uid &&
                             (request.resource.data.content == null || (request.resource.data.content is string && request.resource.data.content.size() > 0)) &&
                             (request.resource.data.authorDisplayName == null || request.resource.data.authorDisplayName == resource.data.authorDisplayName) &&
                             (request.resource.data.lastEditedAt == null || request.resource.data.lastEditedAt == request.time) &&
                             (request.resource.data.helpfulVoteCount == null || request.resource.data.helpfulVoteCount == resource.data.helpfulVoteCount) &&
                             (request.resource.data.notHelpfulVoteCount == null || request.resource.data.notHelpfulVoteCount == resource.data.notHelpfulVoteCount) &&
                             request.resource.data.keys().hasOnly(['authorId', 'content', 'timestamp', 'postId', 'authorDisplayName', 'helpfulVoteCount', 'notHelpfulVoteCount', 'lastEditedAt'])
                           ) ||
                           ( // Case 2: Vote count update
                             (request.resource.data.content == null || request.resource.data.content == resource.data.content) &&
                             (request.resource.data.authorDisplayName == null || request.resource.data.authorDisplayName == resource.data.authorDisplayName) &&
                             (
                               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['helpfulVoteCount', 'notHelpfulVoteCount']) ||
                               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['helpfulVoteCount']) ||
                               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['notHelpfulVoteCount'])
                             )
                           )
                         );

        allow delete: if request.auth != null &&
                         resource.data.authorId == request.auth.uid;
      }
    }

    // Rules for userItemVotes collection
    match /userItemVotes/{voteDocId} {
      // Allow reading if the user ID in the document ID prefix matches the authenticated user
      // This allows checking for non-existent votes without permission errors
      allow read: if request.auth != null && 
                     voteDocId.split('_')[0] == request.auth.uid;

      allow create: if request.auth != null &&
                       // Corrected to use split():
                       (voteDocId.split('_')[0] == request.auth.uid && voteDocId.split('_').size() >= 2) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.itemId is string &&
                       request.resource.data.itemType in ['post', 'answer'] &&
                       request.resource.data.voteType in ['helpful', 'notHelpful'] &&
                       request.resource.data.timestamp == request.time &&
                       request.resource.data.keys().hasAll(['userId', 'itemId', 'itemType', 'voteType', 'timestamp']) &&
                       request.resource.data.keys().hasOnly(['userId', 'itemId', 'itemType', 'voteType', 'timestamp']);

      allow update: if request.auth != null &&
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.itemId == resource.data.itemId &&
                       request.resource.data.itemType == resource.data.itemType &&
                       request.resource.data.voteType in ['helpful', 'notHelpful'] &&
                       request.resource.data.timestamp == request.time &&
                       request.resource.data.keys().hasOnly(['userId', 'itemId', 'itemType', 'voteType', 'timestamp']);

      allow delete: if request.auth != null &&
                       resource.data.userId == request.auth.uid;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}